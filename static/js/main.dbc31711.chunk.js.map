{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","searchSpace","event","keyword","target","value","setState","search","filterPeople","filteredPeople","state","people","filter","person","id","toLowerCase","includes","name","items","it","length","address","pincode","intoView","person_i","elem","personsRef","console","log","scrollIntoView","block","setCursor","cursor","e","handleKeyDown","bind","loading","this","keyCode","prevState","newCursor","fetch","response","json","data","document","addEventListener","removeEventListener","className","type","placeholder","onChange","map","onMouseOver","onMouseOut","ref","key","dataItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dbc31711.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super();\n    this.personsRef = {};\n    this.handleKeyDown = this.handleKeyDown.bind(this)\n    this.state = {\n      loading: true,\n      people: [],\n      search: null,\n      cursor: null\n    };\n  }\n  searchSpace = (event) => {\n    let keyword = event.target.value;\n    this.setState({ search: keyword }, () => this.filterPeople())\n  }\n\n  filterPeople = () => {\n\n    let filteredPeople = this.state.people.filter((person) => {         //function to Filter data by name\n      if (this.state.search == null)\n        return person\n      else if (person.id.toLowerCase().includes(this.state.search.toLowerCase()) || person.name.toLowerCase().includes(this.state.search.toLowerCase()) || person.items.filter(it => it.toLowerCase().includes(this.state.search.toLowerCase())).length || person.address.toLowerCase().includes(this.state.search.toLowerCase()) || person.pincode.toLowerCase().includes(this.state.search.toLowerCase())) {\n        return person\n      }\n    })\n\n    this.setState({ filteredPeople });\n\n  }\n\n  handleKeyDown(e) {\n    const { cursor, filteredPeople } = this.state\n    // arrow up/down button should select next/previous list element\n    if (e.keyCode === 38 && cursor > 0) {\n      this.setState(prevState => {\n        let newCursor = prevState.cursor;\n        this.intoView(newCursor);\n        return {\n          cursor: newCursor - 1\n        }\n      })\n    } else if (e.keyCode === 40 && (cursor < filteredPeople.length - 1 || cursor === null)) {\n      this.setState(prevState => {\n        let newCursor = prevState.cursor;\n        if (newCursor === null) newCursor = 0\n        this.intoView(newCursor);\n        return {\n          cursor: newCursor + 1\n        }\n      })\n    }\n  }\n\n  intoView = (person_i) => {\n    const elem = this.personsRef[person_i];\n    console.log(this.personsRef, person_i);\n    if (!person_i || !elem) return;\n    elem.scrollIntoView({ block: \"center\" });\n\n  }\n\n  setCursor = (cursor = null) => (e) => this.setState({ cursor });\n\n  async componentDidMount() {\n    const url = \"https://www.mocky.io/v2/5ba8efb23100007200c2750c\"\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({ people: data, loading: false }, () => this.filterPeople())\n    console.log(data[0]);\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <div>Loading...</div>\n    }\n    return (\n      <div className=\"App\">\n        <input type=\"text\" placeholder=\"Enter item to be searched\" onChange={(e) => this.searchSpace(e)} />\n        <div className=\"list_info--wrap\">\n          {\n\n            this.state.filteredPeople && this.state.filteredPeople.map((person, person_i) => (\n              <div onMouseOver={this.setCursor(person_i)} onMouseOut={this.setCursor()} className={`list_info${person_i === this.state.cursor ? \" highlight\" : \"\"}`} id={`person_info_${person_i}`} ref={e => this.personsRef[person_i] = e} key={person.id}>\n                <div>{person.id}</div>\n                <div className=\"pName\">{person.name}</div>\n                <div>{person.items.map(dataItem => (\n                  <span className=\"listItems\">{dataItem}</span>\n                ))}</div>\n                <div>{person.address}</div>\n                <div>{person.pincode}</div>\n              </div>\n            ))\n\n          }\n        </div>\n        {\n          this.state.filteredPeople && !this.state.filteredPeople.length && <div>Didn't find any person</div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}